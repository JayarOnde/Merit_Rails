= Talent

== Installation

1. Add 'talent' to your Gemfile.
2. Run 'rails g talent:install'
3. Run 'rails g talent MODEL_NAME'
4. Add 'grant_badges' to controllers where you want this behavior triggered.
5. Configure rules to grant badges in 'app/models/talent_rules.rb', or grant
   them from controller actions:
     Badge.find(3).grant_to(current_user)
6. Run 'rake db:migrate'

== Defining talent rules:

+grant_on+ accepts:
* +controller+#+action+ string (similar to Rails routes)
* :+badge+ for badge name
* :+level+ for badge level
* :+to+ can be:
  * +related_user+ applies badge to the target object's related user
    (+post+.+user+ for instance)
  * +action_user+ (default) applies badge to the user who triggered the action
    (+current_user+, also called "source")
* :+temporary+ (boolean): if the condition doesn't hold and the receiver had
  the badge, it gets removed. +false+ by default (badges are kept forever).
* &+block+
  * empty (always grants)
  * a block which evaluates to boolean (recieves target object as parameter)
  * a block with a hash composed of methods to run on the target object with
    expected values

=== Examples:

    grant_on 'comments#vote', :badge => 'relevant-commenter', :to => :related_user do
      { :votes => 5 }
    end

    grant_on 'users#update', :badge => 'autobiographer', :temporary => true do |user|
      user.name.present? && user.address.present?
    end


== Test application

To run the test application inside this gem follow:
1. cd test/dummy
2. rails g talent:install
3. rails g talent user
4. rake db:migrate ; rake db:seed
5. rails s


== To-do list

* grep -r 'FIXME\|TODO' .
* Error handling: inexistent badges? grant_on(nil_user)?
* Testear con delayed_job:
    class GrantBadgesJob
      def perform
        ::TalentRules.new.check_new_actions
      end
    end
