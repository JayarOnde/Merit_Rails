= Talent

== Installation

1. Add 'talent' to your Gemfile.
2. Run 'rails g talent:install'
3. Run 'rails g talent MODEL_NAME'
4. Add 'grant_badges' to controllers where you want this behavior triggered.
5. Configure rules to grant badges in 'app/models/talent_rules.rb', or grant
   them from controller actions:
     Badge.find(3).grant_to(current_user)
6. Run 'rake db:migrate'

== Defining talent rules:

+grant_on+ accepts:
* +controller+#+action+ string (similar to Rails routes)
* :+badge+ for badge name
* :+level+ for badge level
* :+to+: method name over target_object which obtains user to badge.
* :+temporary+ (boolean): if the condition doesn't hold and the receiver had
  the badge, it gets removed. +false+ by default (badges are kept forever).
* &+block+
  * empty (always grants)
  * a block which evaluates to boolean (recieves target object as parameter)
  * a block with a hash composed of methods to run on the target object with
    expected values

=== Examples:

    grant_on 'comments#vote', :badge => 'relevant-commenter', :to => :related_user do
      { :votes => 5 }
    end

    grant_on 'users#update', :badge => 'autobiographer', :temporary => true do |user|
      user.name.present? && user.address.present?
    end


== Test application

To run the test application inside this gem follow:
1. cd test/dummy
2. rails g talent:install
3. rails g talent user
4. rake db:migrate ; rake db:seed
5. rails s


== To-do list

* talent->merit conceptually is more coherent
* :to is a method name, not a simple symbol.
* grep -r 'FIXME\|TODO' .
* Should allow more than one subject to badge (for example, users and lists are
  "talentable").
* :value parameter (for star voting for example) should be configurable (depends
  on params[:value] on the controller).
* Is it ok a RecordNotFound exception for non existent badge? Could
  grant_to(user) fail (user nil)?
* Can we avoid "grant_badges" call on controllers? Easy to forget, could be a design "smell".
* Make fixtures for integration testing (now creating objects on test file!).

=== Possible reorganization:
Simplify installers and application code, rely more on the gem:
* Sash model 1<->1 'talentable' app models
* sashes(id, model_name, model_id)
* Sash m<sashes_badges>n Badges
* Rules could be defined on 'talentable' models.

=== Features
* Stars are given not because of a concrete action (first parameter not needed)
    grant_on '?', :badge => 'stars', :value => 1 do |user|
      user.badges.include?(Badge.where(:name => 'autobiographer').first) &&
      user.photos.present?
    end
* Define whenever or cron syntax to test badges granting on background, instead
  of on each action.
* grant_on 'users#show', :badge => 'enthusiast', :if => { :enthusiast? => true }
  (last parameter is an :if hash, not a block which evaluates to Hash)
* Are controller#action strings always necessary? Feature: could be an API
  improvement.